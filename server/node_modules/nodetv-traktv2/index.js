'use strict';

var crypto	= require('crypto'),
	extend	= require('xtend'),
	log4js	= require('log4js'),
	Q		= require('q'),
	qs		= require('querystring'),
	request = null;

log4js.configure({
	appenders: [{
		type: 'console'
	}],
	replaceConsole: true
});
var logger = log4js.getLogger('nodetv-trakt');

var urls = {
	'production': 'https://trakt.tv',
	'sandbox': 'https://api.v2.trakt.tv'
};
var api_url = urls.production;

var about = require('./package.json');

/******************************************************************************/

var TraktAPI = module.exports = function(config){
	this.settings = {
		'client_id': 'cf6bd248aef587c010e8065a7196f8b178f3753803c97fef62b86c10b537d129',
		'client_secret': '05c5c80bac1f36bc6e9cfd14f2bf942746c97ed9fdc116fba0504ca8e470dc80',
		'redirect_uri': 'urn:ietf:wg:oauth:2.0:oob'
	//	'redirect_uri': 'https://localhost:6377/oauth'
	};
	var defaults = {
		'followRedirect':false,
		'gzip':true,
		'headers':{
			'Content-type': 'application/json',
			'trakt-api-key': this.settings.client_id,
			'trakt-api-version': 2
		},
		'json':true,
		'strictSSL': false
	};
//	defaults.headers['Authorization'] = 'Bearer 2139c36e542e26ace118d36b32ca3afa1906ea8d668c12452c29a4f303a6cc76';
	/*
	if (user){
		if (user.access_token) defaults.headers['Authorization'] = 'Bearer '+user.access_token;
		this.user = user;
	}
	*/
//	request = require('request').defaults(defaults);
};

/******************************************************************************/

TraktAPI.prototype.get = function(url, qs){
	var deferred = Q.defer(), options = {}, self = this;
	
	this.login().then(function(){
		// Do stuff
	})
	
	
	if (typeof(qs) == 'object') options.qs = qs;
	request.get(url, options, function(error,res,json){
		if (error) {
			logger.error(error);
			return deferred.resolve(error);
		}
		if (res && res.statusCode >= 400) {
			return deferred.reject({'statusCode':res.statusCode,'status':res.headers.status});
		}
		if (json) deferred.resolve(json);
		
		/*
		if (res.statusCode == 401){
			self.auth().then(function(){
				self.get(url,qs).then(function(success){
					deferred.resolve(success);
				})
			});
			return;
		}
		// Request is a bit shitty with redirects (it drops all of our headers)
		// Either that, or trakt v2 is being crap (very possible)
		if (res.statusCode == 301){
			self.get(res.headers.location).then(function(success){
		//		deferred.resolve(success)
			},function(error){
				deferred.reject(error);
			})
		} else {
			if (res && res.statusCode >= 400) {
				return deferred.reject({'statusCode':res.statusCode,'status':res.headers.status});
			}
		//	if (json) deferred.resolve(json);
		}
		*/
	});
	return deferred.promise;
};

TraktAPI.prototype.post = function(url, data){
	var deferred = Q.defer(), options = {'json':true}, self = this;
	
	if (!data.app_version) data.app_version = about.version;
	options.body = data;
	
	request.post(url, options, function(error,res,json){
		if (error) {
			logger.error(error);
			return deferred.resolve(error);
		}
		if (res.statusCode == 401){
			// re-auth, then try again
			self.auth().then(function(){
				self.post(url,data).then(function(success){
					deferred.resolve(success);
				})
			});
			return;
		}
		if (json) deferred.resolve(json);
	});
	return deferred.promise;
};

/******************************************************************************/

/*
TraktAPI.prototype.auth = function(){
	var deferred = Q.defer(), self = this;
	
	if (this.user.refresh_token){
		this.token(this.user.refresh_token, true).then(function(success){
			var expires = new Date();
			expires.setTime(expires.getTime()+(success.expires*1000));
			this.user.access_token = success.access_token;
			this.user.token_expires = new Date
			deferred.resolve();
		},function(error){
			deferred.reject();
		});
		
	} else if (this.user.password) {
		this.login().then(function(success){
			
		}, function(error){
			
		})
	}
	return deferred.promise;
};
TraktAPI.prototype.authUrl = function(){
	var query = {
		'response_type':'code',
		'client_id': this.settings.client_id,
		'redirect_uri': this.settings.redirect_uri,
		'state':'state'
	};
//	if (this.user.username) query.username = this.user.username;
	return 'https://trakt.tv/oauth/authorize?'+qs.stringify(query);
};
TraktAPI.prototype.token = function(code,refresh){
	var deferred = Q.defer(), self = this;
	var payload = {
		'code': code,
		'client_id': this.settings.client_id,
		'client_secret': this.settings.client_secret,
		'redirect_uri': this.settings.redirect_uri,
		'grant_type': (refresh) ? 'refresh_token': 'authorization_code'
	};
	request.post(api_url+'/oauth/token', {'body':payload}, function(error,res,json){
		if (error) {
			logger.error(error);
			return deferred.reject(error);
		}
		if (json){
			self.user.access_token = json.access_token;
			deferred.resolve(json);
		}
	});
};
*/

TraktAPI.prototype.login = function(){
	var deferred = Q.defer(), self = this;
	request.post(api_url+'/auth/login', {'body':{'login':self.user.username,'password':self.user.password}}, function(error,res,json){
		if (error) {
			logger.error(error);
			return deferred.reject(error);
		}
		if (json){
			request.defaults({'trakt-user-login':self.user.username,'trakt-user-token':json.token})
			deferred.resolve(json);
		}
	});
	return deferred.promise;
};

/******************************************************************************/

TraktAPI.prototype.genres = {
	'movies': function(){
		return self.get(api_url+'/genres/movies');
	},
	'shows': function(){
		return self.get(api_url+'/genres/shows');
	}
};

TraktAPI.prototype.movie = function(id){
	var self = this;
	return {
		'collected': function(){
			
		},
		'ratings': function(){
			return self.get(api_url+'/movies/'+id+'/ratings');
		},
		'search': function(){
			return self.get(api_url+'/search?type=movie&query='+query);
		},
		'summary': function(){
			return self.get(api_url+'/movies/'+id);
		},
		'watching': function(){
			return self.get(api_url+'/movies/'+id+'/watching');
		}
	};
};

TraktAPI.prototype.search = function(type, query){
	return this.get(api_url+'/search?type='+type+'&query='+query);
};

TraktAPI.prototype.show = function(id){
	var self = this;
	return {
		'episode': function(episode,season){
			return {
				'collected': function(){
					
				},
				'summary': function(){
					return self.get(api_url+'/shows/'+id+'/season/'+season+'/episode/'+episode+'?extended=full');
				},
				'watched': function(){
					
				}
			};
		},
		'search': function(){
			return self.get(api_url+'/search?type=show&query='+query);
		},
		'season': function(season){
			return {
				'episode': function(episode){
					return self.get(api_url+'/shows/'+id+'/season/'+season+'/episode/'+episode+'?extended=full');
				},
				'summary': function(){
					return self.get(api_url+'/shows/'+id+'/season/'+season+'?extended=full');
				}
			};
		},
		'seasons': function(){
			return self.get(api_url+'/shows/'+id+'/seasons?extended=full');
		},
		'summary': function(){
			return self.get(api_url+'/shows/'+id+'?extended=full,images');
		}
	};
};

TraktAPI.prototype.sync = {
	'movies': function(){
		return this.get(api_url+'/sync/collection/movies');
	},
	'shows': function(){
		return this.get(api_url+'/sync/collection/shows');
	}
};