var crypto	= require('crypto'),
	extend	= require('xtend'),
	log4js	= require('log4js'),
	Q		= require('q'),
	request	= require('request');

log4js.configure({
	appenders: [{
		type: 'console'
	}],
	replaceConsole: true
});
var logger = log4js.getLogger('nodetv-trakt');


var Trakt = function(settings){
	API.init(settings);
	return API;
}

var API = {
	init: function(obj){
		this.settings = extend(this.settings, obj);
		return this;
	},
	settings: {
		enabled: true,
		hashed: true,
		username: null,
		password: null,
		apikey: null
	},
	baseurl: 'http://api.trakt.tv/',
	
	/* Utility Methods */
	password: function() {
		try {
			if (!API.settings.hashed) return require('crypto').createHash('sha1').update(API.settings.password).digest('hex');
			return API.settings.password;
		} catch(e) {
			logger.error(e.message);
		}
	},
	
	get: function(url, data, callback) {
		var deferred = Q.defer();
		if (typeof(data) == 'object') {
			var array = [];
			for (var i in data) array.push(data[i]);
			data = array;
		}
		var path = (data) ? '/' + data.join('/') : '';
		request({
			uri: API.baseurl+url+'/'+API.settings.apikey + path,
			method: 'GET'
		}, function(error, req, response){
			if (error) {
				logger.error(error);
				deferred.reject(error);
				return;
			}
			try {
				if (typeof(response) != 'object') response = JSON.parse(response);
				if (response.error) return logger.error(response.error);
				if (typeof(callback) == 'function') callback(null, response);
				deferred.resolve(response);
			} catch(e) {
				logger.error(url+': '+e.message);
				deferred.reject(e.message);
			}
		}).auth(API.settings.username, API.password());
		return deferred.promise;
	},
	
	post: function(url, data, callback) {
		var deferred = Q.defer();
		request({
			uri: API.baseurl+url+'/'+API.settings.apikey,
			json: data,
			method: 'POST'
		}, function(error, req, response){
			if (error) {
				logger.error(url+': '+error);
				deferred.reject(error);
				return;
			}
			try {
				if (typeof(response) != 'object') response = JSON.parse(response);
				if (response.error) return logger.error(response.error);
				if (typeof(callback) == 'function') callback(null, response);
				deferred.resolve(response);
			} catch(e) {
				logger.error(url+': '+e.message);
				deferred.reject(e.message);
			}
		}).auth(API.settings.username, API.password());
		return deferred.promise;
	},
	
	search: function(type, query, callback){
		var deferred = Q.defer();
		request({
			uri: 'http://api.trakt.tv/search/'+type+'.json/'+API.settings.apikey + '?limit=20&query=' + query,
			method: 'GET'
		}, function(error, req, response){
			try {
				if (error) {
					logger.error(error);
					deferred.reject(error);
				}
				if (typeof(response) != 'object') response = JSON.parse(response);
				if (typeof(callback) == 'function') callback(null, response);
				deferred.resolve(response);
			} catch(e) {
				logger.error('search/'+type+': '+e.message);
			}
		}).auth(API.settings.username, API.password());
		return deferred.promise;
	},
	
	/*********************************/
	
	account: {
		test: function(callback){
			var payload = {};
			return API.post('account/test', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		}
	},
	
	/*********************************/
	
	calendar: {
		shows: function(callback){
			var payload = {
				username: API.settings.username
			};
			return API.get('user/calendar/shows.json', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		}
	},
	
	/*********************************/
	
	lists: {
		add: function(list, callback){
			var payload = {
				username: API.settings.username,
				name: list.name,
				privacy: 'friends',
				allow_shouts: false
			};
			return API.post('lists/add', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		},
		delete: function(list){
			
		},
		items: {
			add: function(list, items){
				
			},
			delete: function(list, items){
				
			}
		},
		update: function(list){
			
		}
	},
	
	/*********************************/
	
	movie: {
		library: function(imdb, callback){
			var payload = {
				type: 'movie',
				movies: [{imdb_id: imdb}]
			};
			return API.post('movie/library', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		},
		seen: function(imdb, callback){
			var payload = {
				movies: [{imdb_id: imdb}]
			};
			return API.post('movie/seen', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		},
		summaries: function(items, callback){
			var payload = {
				items: items.join(',')
			};
			return API.get('movie/summaries.json', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		},
		summary: function(imdb, callback){
			var payload = {
				imdb_id: imdb
			};
			return API.get('movie/summary.json', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		},
		unlibrary: function(imdb, callback){
			var payload = {
				movies: [{imdb_id: imdb}]
			};
			return API.post('movie/unlibrary', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		},
		unseen: function(imdb, callback){
			var payload = {
				movies: [{imdb_id: imdb}]
			};
			return API.post('movie/unseen', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		},
		unwatchlist: function(imdb, callback){
			var payload = {
				movies: [{imdb_id: imdb}]
			};
			return API.post('movie/unwatchlist', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		},
		watchlist: function(imdb, callback){
			var payload = {
				movies: [{imdb_id: imdb}]
			};
			return API.post('movie/watchlist', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});			
		}
	},
	
	/*********************************/
	
	movies: {
		trending : function(callback){
			
		},
		updated: function(callback){
			
		}
	},
	
	/*********************************/
	
	network: {
		follow: function(user, callback){
			var payload = {
				user: user
			};
			return API.post('network/follow', payload, callback);
		}
	},
	
	/*********************************/
	
	recommendations: {
		shows: function(callback){
			var payload = {
				hide_collected: true,
				hide_watchlisted: true	
			};
			return API.post('recommendations/shows', payload, callback);
		}
	},
	
	server: {
		time: function(){
			return API.get('server/time.json', {}, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		}
	},
	
	/*********************************/
	
	show: {
		checkin: function(){
			var payload = {
				tvdb_id: null,
				season: null,
				episode: null
			}
			return API.post('show/checkin', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		},
		
		episode: {
			library: function(tvdb, list, callback){
				// Add episode to library
				/* list = {season: 1, episode: 1} */
				var payload = {
					tvdb_id: tvdb,
					episodes: list
				};
				return API.post('show/episode/library', payload, function(error, json){
					if (typeof(callback) == 'function') callback(error, json);
				});
			},
			seen: function(tvdb, season, episode, callback){
				// Mark episode as watched
				var payload = {
					tvdb_id: tvdb,
					episodes: [{
						season: season,
						episode: episode
					}]
				};
				return API.post('show/episode/seen', payload, function(error, json){
					if (typeof(callback) == 'function') callback(error, json);
				});
			},
			summary: function(tvdb, season, episode, callback){
				var payload = {
					tvdb_id: tvdb,
					season: season,
					episode: episode
				};
				return API.get('show/episode/summary.json', payload, function(error, json){
					if (typeof(callback) == 'function') callback(error, json);
				});
			},
			unseen: function(tvdb, season, episode, callback){
				var payload = {
					tvdb_id: tvdb,
					episodes: [{
						season: season,
						episode: episode
						
					}]
				};
				return API.post('show/episode/unseen', payload, function(error, json){	
					if (typeof(callback) == 'function') callback(error, json);
				});
			}

		},
		
		library: function(tvdb, callback){
			var payload = {
				tvdb_id: tvdb
			};
			return API.post('show/library', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		},
		
		season: {
			info: function(tvdb, season, callback){
				var payload = [tvdb, season];
				return API.get('show/season.json', payload, function(error, json){
					if (typeof(callback) == 'function') callback(error, json);
				});
			},
			library: function(tvdb, season, callback){
				var payload = {
					tvdb_id: tvdb,
					season: season
				};
				return API.post('show/season/library', payload, function(error, json){
					if (typeof(callback) == 'function') callback(error, json);
				});
			},
			seen: function(tvdb, season, callback){
				var payload = {
					tvdb_id: tvdb,
					season: season
				};
				return API.post('show/season/seen', payload, function(error, json){
					if (typeof(callback) == 'function') callback(error, json);
				});
			}
		},
		seasons: function(tvdb, callback){
			var payload = {
				tvdb_id: tvdb
			};
			return API.get('show/seasons.json', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		},
		seen: function(tvdb, callback){
			var payload = {
				tvdb_id: tvdb
			};
			return API.post('show/seen', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		},
		summary: function(tvdb, callback){
			var payload = {
				tvdb_id: tvdb
			};
			return API.get('show/summary.json', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		},
		unlibrary: function(tvdb, callback){
			var payload = {
				tvdb_id: tvdb
			};
			return API.post('show/unlibrary', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		},
		unseen: function(tvdb,callback){
			var payload = {
				tvdb_id: tvdb
			};
			return API.post('show/unseen', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			});
		},
		watchlist: function(shows, callback){
			var payload = {
				shows: []
			};
			if (typeof(shows) == 'object') {
				shows.forEach(function(k,v){
					payload.shows.push({
						tvdb_id: k
					});
				});
			} else {
				payload.shows.push(shows)
			}
			return API.post('show/watchlist', payload, function(error, json){
				if (typeof(callback) == 'function') callback(error, json);
			})
		}
	},
	
	/*********************************/
	
	user: {
		library: {
			movies: {
				all: function(callback){
					var payload = {
						username: API.settings.username,
						extended: true
					};
					return API.get('user/library/movies/all.json', payload, function(error, json){
						if (typeof(callback) == 'function') callback(error, json);
					})
				}
			},
			shows: {
				all: function(callback){
					var payload = {
						username: API.settings.username,
						extended: true
					};
					return API.get('user/library/shows/all.json', payload, function(error, json){
						if (typeof(callback) == 'function') callback(error, json);
					});
				}
			}
		},
		progress: {
			collected: function(callback){
				var payload = {
					username: API.settings.username
				};
				return API.get('user/progress/collected.json', payload, function(error, json){
					if (typeof(callback) == 'function') callback(error, json);
				});
			},
			watched: function(tvdb, callback){
				var payload = {
					username: API.settings.username,
					tvdb_id: tvdb
				};
				return API.get('user/progress/watched.json', payload, function(error, json){
					if (typeof(callback) == 'function') callback(error, json);
				});
			}
		},
		watchlist: {
			movies: function(callback){
				var payload = {
					username: API.settings.username
				};
				return API.get('user/watchlist/movies.json', payload, function(error, json){
					if (typeof(callback) == 'function') callback(error, json);
				});
			}
		}
	}
};

module.exports = exports = Trakt;